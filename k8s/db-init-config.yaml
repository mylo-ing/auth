# db-bootstrap-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-bootstrap
data:
  bootstrap.sh: |
    #!/bin/sh -eu
    echo "db-init starting …"

    # Wait up to 60 s for Postgres
    for i in $(seq 1 30); do
      pg_isready -h "$DB_HOST" -p "$DB_PORT" -U "$DB_ADMIN_USER" && break
      echo "[$i/30] db not ready…"
      sleep 2
    done
    pg_isready -h "$DB_HOST" -p "$DB_PORT" -U "$DB_ADMIN_USER" \
      || { echo "Postgres never ready"; exit 1; }

    export PGPASSWORD="$DB_ADMIN_PASSWORD"
    psql -v ON_ERROR_STOP=1 \
         -h "$DB_HOST" -p "$DB_PORT" -U "$DB_ADMIN_USER" \
         --set=worker="$DB_USER" \
         --set=wpw="$DB_PASSWORD" \
         --set=appdb="$DB_NAME" \
         -f /scripts/init.sql

    echo "Bootstrap finished!"

  init.sql: |
    --role / db / schema bootstrap
    \set ON_ERROR_STOP 1

    SELECT
      'CREATE ROLE ' || quote_ident(:'worker') || ' LOGIN'
    WHERE NOT EXISTS (
      SELECT 1 FROM pg_roles WHERE rolname = :'worker'
    )\gexec

    ALTER ROLE :worker WITH PASSWORD :'wpw';

    SELECT
      'CREATE DATABASE ' || quote_ident(:'appdb') ||
      ' OWNER '          || quote_ident(:'worker')
    WHERE NOT EXISTS (
      SELECT 1 FROM pg_database WHERE datname = :'appdb'
    )\gexec

    \connect :appdb
    CREATE SCHEMA IF NOT EXISTS api AUTHORIZATION :"worker";
    ALTER  ROLE :"worker"  SET search_path = api, public;
    GRANT ALL PRIVILEGES ON DATABASE :"appdb" TO :"worker";
    GRANT ALL PRIVILEGES ON SCHEMA   api      TO :"worker";

